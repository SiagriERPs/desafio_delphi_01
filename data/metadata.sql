/******************************************************************************/
/*           Generated by IBExpert 2024.12.4.1 15/12/2024 21:50:00            */
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1252;

SET CLIENTLIB 'C:\Program Files (x86)\Firebird\Firebird_2_1\bin\fbclient.dll';

CREATE DATABASE '127.0.0.1/3050:C:\DSV\Delphi\ProjetoTrade\desafio_delphi_01\data\dbTrade.fdb'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 4096
DEFAULT CHARACTER SET WIN1252;



/******************************************************************************/
/*                                 Generators                                 */
/******************************************************************************/

CREATE GENERATOR GEN_IDCONTRATO;
SET GENERATOR GEN_IDCONTRATO TO 6;

CREATE GENERATOR GEN_IDGRAO;
SET GENERATOR GEN_IDGRAO TO 4;

CREATE GENERATOR GEN_IDPRODUTOR;
SET GENERATOR GEN_IDPRODUTOR TO 3;

CREATE GENERATOR GEN_IDTRADE;
SET GENERATOR GEN_IDTRADE TO 3;



/******************************************************************************/
/*                             Stored procedures                              */
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE OBTERDECIMAIS (
    QUANTIDADE DECIMAL(6,3))
RETURNS (
    DDECIMAIS DECIMAL(6,3))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE PDISTRIBUIRGRAOS (
    IDTRADETGDIST INTEGER,
    IDCONTRATOTGDIST INTEGER,
    QUANTIDADETGDIST DECIMAL(6,3))
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/



CREATE TABLE CONTRATO (
    ID          INTEGER NOT NULL,
    IDPRODUTOR  INTEGER NOT NULL,
    IDTRADE     INTEGER NOT NULL,
    IDGRAO      INTEGER NOT NULL,
    QUANTIDADE  DECIMAL(6,3) NOT NULL,
    DTEMISSAO   TIMESTAMP default current_timestamp,
    DTVIGENCIA  TIMESTAMP
);

CREATE TABLE GRAO (
    ID    INTEGER NOT NULL,
    NOME  VARCHAR(50)
);

CREATE TABLE PRODUTOR (
    ID    INTEGER NOT NULL,
    CNPJ  VARCHAR(14),
    NOME  VARCHAR(50)
);

CREATE TABLE SILO (
    IDTRADE        INTEGER NOT NULL,
    IDCONTRATO     INTEGER NOT NULL,
    IDENTIFICADOR  VARCHAR(20),
    QUANTIDADE     DECIMAL(6,3)
);

CREATE TABLE TRADE (
    ID    INTEGER NOT NULL,
    CNPJ  VARCHAR(14),
    NOME  VARCHAR(50)
);



/******************************************************************************/
/*                             Unique constraints                             */
/******************************************************************************/

ALTER TABLE GRAO ADD UNIQUE (NOME);
ALTER TABLE PRODUTOR ADD UNIQUE (NOME);
ALTER TABLE PRODUTOR ADD UNIQUE (CNPJ);
ALTER TABLE TRADE ADD UNIQUE (CNPJ);
ALTER TABLE TRADE ADD UNIQUE (NOME);


/******************************************************************************/
/*                                Primary keys                                */
/******************************************************************************/

ALTER TABLE CONTRATO ADD PRIMARY KEY (ID);
ALTER TABLE GRAO ADD PRIMARY KEY (ID);
ALTER TABLE PRODUTOR ADD PRIMARY KEY (ID);
ALTER TABLE TRADE ADD PRIMARY KEY (ID);


/******************************************************************************/
/*                                Foreign keys                                */
/******************************************************************************/

ALTER TABLE CONTRATO ADD FOREIGN KEY (IDPRODUTOR) REFERENCES PRODUTOR (ID);
ALTER TABLE CONTRATO ADD FOREIGN KEY (IDTRADE) REFERENCES TRADE (ID);
ALTER TABLE CONTRATO ADD FOREIGN KEY (IDGRAO) REFERENCES GRAO (ID);
ALTER TABLE SILO ADD FOREIGN KEY (IDTRADE) REFERENCES TRADE (ID);
ALTER TABLE SILO ADD FOREIGN KEY (IDCONTRATO) REFERENCES CONTRATO (ID);


/******************************************************************************/
/*                                  Triggers                                  */
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/*                            Triggers for tables                             */
/******************************************************************************/



/* Trigger: TGCONTRATO */
CREATE TRIGGER TGCONTRATO FOR CONTRATO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    new.id = gen_id(gen_idContrato,1);
END
^

/* Trigger: TGDISTRIBUIRGRAOS */
CREATE TRIGGER TGDISTRIBUIRGRAOS FOR CONTRATO
ACTIVE AFTER INSERT POSITION 0
AS
BEGIN
    execute procedure pDistribuirGraos(new.idTrade, new.id, new.quantidade);
END
^

/* Trigger: TGGRAO */
CREATE TRIGGER TGGRAO FOR GRAO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    new.id = gen_id(gen_idGrao,1);
END
^

/* Trigger: TGPRODUTOR */
CREATE TRIGGER TGPRODUTOR FOR PRODUTOR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    new.id = gen_id(gen_idProdutor,1);
END
^

/* Trigger: TGTRADE */
CREATE TRIGGER TGTRADE FOR TRADE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
    new.id = gen_id(gen_idTrade,1);
END
^
SET TERM ; ^



/******************************************************************************/
/*                             Stored procedures                              */
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE OBTERDECIMAIS (
    QUANTIDADE DECIMAL(6,3))
RETURNS (
    DDECIMAIS DECIMAL(6,3))
AS
declare variable vdecimais varchar(3);
begin
/*Esta função retorna a parte flutuante de um valor
/*quantidade = 5500,100*/
/*vdecimais = 100*/
/*ddecimais = 0,1*/
  vdecimais = right(cast(quantidade as varchar(9)), 3);
  ddecimais = cast(vdecimais as decimal(6,3))/1000;
end^


ALTER PROCEDURE PDISTRIBUIRGRAOS (
    IDTRADETGDIST INTEGER,
    IDCONTRATOTGDIST INTEGER,
    QUANTIDADETGDIST DECIMAL(6,3))
AS
declare variable qtdesilo integer;
declare variable restosilo decimal(6,3);
declare variable capacidadesilo decimal(6,3);
declare variable decimaisresto decimal(6,3);
BEGIN
    capacidadeSilo = 90000;
    qtdeSilo = trunc(quantidadeTgDist/capacidadeSilo);
    restoSilo = cast(mod(quantidadeTgDist, capacidadeSilo) as decimal(6,3));
    execute procedure obterdecimais(:QUANTIDADETGDIST) returning_values decimaisresto;
    restoSilo = restoSilo + decimaisresto;

    if (qtdeSilo >= 1) then
    BEGIN
        while (qtdeSilo >= 1) do
        begin
            insert into Silo (idTrade, idContrato, identificador, quantidade) values (:idTradeTgDist, :idContratoTgDist, 0, :capacidadeSilo);
            qtdeSilo = qtdeSilo - 1;
        end
    END

    if (restoSilo > 0) then
        insert into Silo (idTrade, idContrato, identificador, quantidade) values (:idTradeTgDist, :idContratoTgDist, 0, :restoSilo);
END^



SET TERM ; ^

